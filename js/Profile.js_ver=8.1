function refreshCarsProfile(address){
async.waterfall([
    function(callback){
	
		//if(address=="")
	    EtherLambos.tokensOfOwner(address, (error,result) => {
			var t = new Array();
			if(!error){
				console.log(result.length);
				for(i=0;i<result.length;i++)
					{
						t[i]=result[i].c;
						console.log(t[i]);
					}
				}
			else
				{
				console.log(error);
				}
			callback(null, t);
		});
		
       
    }  ,
 	function(tokens,  callback){
        // arg1 now equals 'one' and arg2 now equals 'two'
		console.log("You have "+tokens.length+" Tokens!");
		//$("#tokensOfOwner").html("You have "+tokens.length+" Cars!");
		
		async.map(tokens, getLambosGarage, function (err, results) {
		  // Square has been called on each of the numbers
		  // so we're now done!
		  console.log("Finished1!");
		  console.log(results);
		  callback(null, results);
		});
    },
    
], function (err, result) {
	console.log("res: "+result);  
   // result now equals 'done'    
	var car_tml="<p>";
	
	var result_json = [];
	
	//init result_json
	for(var i=0;i<result.length;i++)
		{

			result_json[i]=JSON.parse(JSON.stringify(json_LamboInit));
		}
	
		for(i=0;i<result.length;i++)
			{
			
	
				//Build JSON Return:
			
				console.log("rCP: ASSIGN OBJECT: i: "+i);
			
				result_json[i]= JSON.parse(JSON.stringify(showLambo(result[i][0],result[i][2],0)));
				result_json[i].token_id=result[i][1];
				result_json[i].tune_options=JSON.parse(JSON.stringify(showTuningKits(result[i][0],result[i][2]))).tune_options;
				console.log("result_Lambo["+i+"]:");
				console.log(JSON.stringify(result_json[i]));

			
			}
		console.log("BEFORE RETURN");	
		
		var ret_val=JSON.stringify(result_json);
		
		DisplayCarsProfile(result_json);
		
		
});
}



function refreshLamboProfile(){
async.waterfall([
 	function(callback){
       	
		EtherLambos.lamboIndexToOwner(lambo,(error,result) => { 
			if(!error){
				console.log("Ower: "+result+ " t: "+lambo);
				var r = [];
				r[0]=result;
				r[1]=lambo;

				callback(null, r);
				
			
			}
			else{
				console.log("ERROR"+error);
			}
		});
		  
		
    },
 	function(result_owner,callback){
       	
		EtherLambos.getLambo(result_owner[1],(error,result_lambo) => { 
			if(!error){
				console.log("GET LAMBO: "+result_lambo[1].c+ " t: "+result_owner[1]);
				var r = [];
				r[0] = new BigNumber(result_lambo[1]); //Attributes
				r[1]=result_owner[1]; //token_id
				r[3]=result_owner[0]; //Owner
			
				EtherLambos.getLamboModel(lambo,(error,result_model) => { 
					if(!error){
						console.log("GET LAMBO MODEL: "+result_model.c);
						var r2 = [];
						r2[0]=r[0];
						r2[1]=r[1];
						r2[2]=result_model; //model
						r2[3]=r[3];
						//console.log(r);
						return callback(null, r2);
					}
					else{
						console.log("ERROR"+error);
					}
				});
			
			}
			else{
				console.log("ERROR"+error);
			}
		});
		  
		
    },
    
], function (err, result) {
	console.log("res: "+result);  
   // result now equals 'done'   
	 
	var result_json;
	
		//init result_json
		

	result_json=JSON.parse(JSON.stringify(json_LamboInit));
		
	
	if(result[1]!=0&&result[0]!=0)
		{
			
	
					//Build JSON Return:
			
			console.log("rCP: ASSIGN OBJECT: ");
			
			result_json= JSON.parse(JSON.stringify(showLambo(result[0],result[2],0)));
			result_json.token_id=result[1];
			result_json.owner=result[3];
			console.log(result_json.owner);
			result_json.tune_options=JSON.parse(JSON.stringify(showTuningKits(result[0],result[2]))).tune_options;
			console.log("result_Lambo:");
			console.log(JSON.stringify(result_json));

	
		}
	console.log("BEFORE RETURN");	

	var ret_val=JSON.stringify(result_json);

	
	if(result_json.length==1 && result_json[0].token_id==0)
		{
			DisplayCarNotFound();
		}
		else{
			console.log(result_json.length+"<-l : t->"+result_json.token_id)
			DisplayCarView(result_json); 
		}
});
}
function refreshCarsSaleProfile(){
async.waterfall([
    function(callback){
		var index=70;
		
	    Marketplace.owner((error,result) => {
			var v ="";
			if(!error){
				console.log("OWNER: "+result);
				marketPlaceOwner=result;
				}
			else
				{
				console.log(error);
				}
			callback(null, v);
		});
		
       
    } ,
	function(v,callback){
		var index=70;
		
	    EtherLambos.tokensOfOwner(Marketplace.address, (error,result) => {
			var t = new Array();
			if(!error){
				console.log(result.length);
				for(i=0;i<result.length;i++)
					{
						t[i]=result[i].c;
						console.log(t[i]);
					}
				}
			else
				{
				console.log(error);
				}
			callback(null, t);
		});
		
       
    }  ,
 	function(tokens,  callback){
        // arg1 now equals 'one' and arg2 now equals 'two'
		console.log("Marketplace has "+tokens.length+" Tokens! Owner is: "+marketPlaceOwner);
		
		
		async.map(tokens, getLambosMarketplace, function (err, r) {
		  // Square has been called on each of the numbers
		  // so we're now done!
		  console.log("Finished!");
		  console.log(r);
		  callback(null, r);
		});
		
    },
    
], function (err, result) {
	
	console.log("res: "+result);  
   // result now equals 'done'    
	var car_tml="<p>";
	
	var result_json = [];
	//var result_json_cleaned = [];
	//init result_json
	//for(var i=0;i<result.length;i++)
	//	{

	//		result_json[i]=JSON.parse(JSON.stringify(json_LamboInit));
	//	}
	
		for(i=0,j=0;i<result.length;i++)
			{
			
	
				//Build JSON Return:
				if(result[i][3]==profile)
				{
				result_json[j]=JSON.parse(JSON.stringify(json_LamboInit));
				console.log("rCP: ASSIGN OBJECT: i: "+i);
			
				result_json[j]= JSON.parse(JSON.stringify(showLambo(result[i][0],result[i][4],0)));
				result_json[j].token_id=result[i][1];
				result_json[j].seller=result[i][3];
				result_json[j].price=result[i][2];
				result_json[j].tune_options=JSON.parse(JSON.stringify(showTuningKits(result[i][0],result[i][4]))).tune_options;
				console.log("result_Lambo["+j+"]:");
				console.log(JSON.stringify(result_json[j]));
				j++;
				}
			
			}
		console.log("BEFORE RETURN");	
		
		var ret_val=JSON.stringify(result_json);
		
		DisplayCarsSaleProfile(result_json);
	
});
}
/*function refreshCarsSaleProfile(){
async.waterfall([
    function(callback){
		var index=70;
		
	    Marketplace.owner((error,result) => {
			var v ="";
			if(!error){
				console.log("OWNER: "+result);
				marketPlaceOwner=result;
				}
			else
				{
				console.log(error);
				}
			callback(null, v);
		});
		
       
    } ,
	function(v,callback){
		var index=70;
		
	    EtherLambos.tokensOfOwner(Marketplace.address, (error,result) => {
			var t = new Array();
			if(!error){
				console.log(result.length);
				for(i=0;i<result.length;i++)
					{
						t[i]=result[i].c;
						console.log(t[i]);
					}
				}
			else
				{
				console.log(error);
				}
			callback(null, t);
		});
		
       
    }  ,
 	function(tokens,  callback){
        // arg1 now equals 'one' and arg2 now equals 'two'
		console.log("Marketplace has "+tokens.length+" Tokens! Owner is: "+marketPlaceOwner);
		
		
		async.map(tokens, getLambosMarketplace, function (err, r) {
		  // Square has been called on each of the numbers
		  // so we're now done!
		  console.log("Finished!");
		  console.log(r);
		  callback(null, r);
		});
		
    },
    
], function (err, result) {
	console.log("res: "+result);  
   // result now equals 'done'    
	var marketPlace_car_tml="<p>";
	var dealer_car_tml="<p>";
	var forSale_car_tml="<p>";
	var cnt_marketPlace=0;
	var cnt_dealer=0;
	
	var result_json = [];
	
	//init result_json
	for(var i=0;i<result.length;i++)
		{
			//json_LamboInit.token_id=i;
			//console.log(json_LamboInit.token_id);
			result_json[i]=JSON.parse(JSON.stringify(json_LamboInit));
		}
	
	for(i=0;i<result.length;i++)
		{
			if(result[i][3]!=profile)
			{
				
			}
			else{
				console.log("ASSIGN OBJECT: i: "+i);
			
				result_json[i]= JSON.parse(JSON.stringify(showLambo(result[i][0],result[i][2],0)));
				result_json[i].token_id=result[i][1];
				result_json[i].tune_options=JSON.parse(JSON.stringify(showTuningKits(result[i][0],result[i][2]))).tune_options;
				console.log("result_Lambo["+i+"]:");
				console.log(JSON.stringify(result_json[i]));
			}
	
		}
	return result_json;
});
}*/
